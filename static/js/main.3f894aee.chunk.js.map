{"version":3,"sources":["quizData.js","App.js","serviceWorker.js","index.js"],"names":["quizData","title","questions","question","choices","answer","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","result_check","bind","assertThisInitialized","ordered_list","document","querySelector","childNodes","values","Array","from","map","data","$","find","val","every","undefined","final_result","reduce","acc","currValue","idx","concat","toConsumableArray","length","swal","text","toFixed","icon","button","react_default","a","createElement","className","key","htmlFor","choice","name","type","value","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mSAyDiBA,EAzDC,CACdC,MAAO,0IACPC,UAAW,CACT,CACEC,SAAU,2IACVC,QAAS,CACP,mUACA,oPACA,6EAEFC,OAAQ,GAEV,CACEF,SAAU,yNACVC,QAAS,CACP,aACA,mBACA,WACA,uBAEFC,OAAQ,GAEV,CACEF,SAAU,8MACVC,QAAS,CACP,kRACA,qSACA,qQAEFC,OAAQ,GAEV,CACEF,SAAU,gHACVC,QAAS,CACP,+VACA,4RACA,0VAEFC,OAAQ,GAEV,CACEF,SAAU,8KACVC,QAAS,CAAC,MAAO,MAAO,OAAQ,SAAU,SAC1CC,OAAQ,GAEV,CACEF,SAAU,iRACVC,QAAS,CACP,aACA,mBACA,qBACA,kBAEFC,OAAQ,oDCeDC,cA3Db,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,aAAeP,EAAKO,aAAaC,KAAlBP,OAAAQ,EAAA,EAAAR,CAAAD,IAFJA,8EAMlB,IAAIU,EAAeC,SAASC,cAAc,iBAAiBC,WAErDC,EADMC,MAAMC,KAAKN,GACFO,IAAI,SAAAC,GAAI,OAAIC,IAAED,GAAME,KAAK,iBAAiBC,QAG/D,GADqBP,EAAOQ,MAAM,SAAAJ,GAAI,YAAaK,IAATL,IAOpC,CAAC,IAMIM,EAAsC,IANpBV,EAAOW,OAAO,SAACC,EAAIC,EAAUC,GAIpD,OAHGD,IAAcnC,EAASE,UAAUkC,GAAKhC,QAAQJ,EAASE,UAAUkC,GAAK/B,UACpE6B,EAAG,GAAAG,OAAA5B,OAAA6B,EAAA,EAAA7B,CAAOyB,GAAP,EAAW,KAEZA,GACL,IACgCK,OAAajB,EAAOiB,OACvD,OAAGP,GAAgB,GACVQ,IAAK,CACXvC,MAAO,mFACPwC,KAAI,qHAAAJ,OAA6BL,EAAaU,QAAQ,GAAlD,8GACJC,KAAM,UACNC,OAAQ,QAEEJ,IAAK,wCAAD,6EAAAH,OAA6BL,EAAaU,QAAQ,GAAlD,8GAA6E,WAnBjG,OAAOF,IAAK,CACVC,KAAM,yJACNE,KAAM,OACNC,OAAQ,oEAsBZ,OACDC,EAAAC,EAAAC,cAAA,eACCF,EAAAC,EAAAC,cAAA,UAAK/C,EAASC,OACd4C,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBACdhD,EAASE,UAAUuB,IAAI,SAACC,EAAKU,GAAN,OAClBS,EAAAC,EAAAC,cAAA,MAAIE,IAAKb,EAAIY,UAAY,cACtBH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,WAAWE,QAASxB,EAAKvB,UAAWiC,EAAM,EAAxD,IAA4DV,EAAKvB,UAC9DuB,EAAKtB,QAAQqB,IAAK,SAAA0B,GAAM,OAAKN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACrCH,EAAAC,EAAAC,cAAA,SAAOK,KAAM1B,EAAKvB,SAAUkD,KAAK,QAAQC,MAAOH,IAEhDN,EAAAC,EAAAC,cAAA,QAAMC,UAAY,UAAUG,UAM9CN,EAAAC,EAAAC,cAAA,UAAQC,UAAU,gBAAgBO,QAAW5C,KAAKI,cAAlD,kEAtDgByC,IAAMC,WCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAAS9C,SAAS+C,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3f894aee.chunk.js","sourcesContent":[" const quizData = {\r\n    title: 'Тест на базовый уровень JavaScript.',\r\n    questions: [\r\n      {\r\n        question: 'Что возвращает метод Array.prototype.filter()?',\r\n        choices: [\r\n          'Массив, если результат работы содержит более одного элемента',\r\n          'Один элемент, если только он прошел фильтрацию',\r\n          'Всегда массив',\r\n        ],\r\n        answer: 2,\r\n      },\r\n      {\r\n        question: 'Как получить список всех ключей объекта obj?',\r\n        choices: [\r\n          'obj.keys()',\r\n          'Object.keys(obj)',\r\n          'obj.keys',\r\n          'Object.getKeys(obj)',\r\n        ],\r\n        answer: 1,\r\n      },\r\n      {\r\n        question: 'Что такое статическое свойство класса?',\r\n        choices: [\r\n          'Свойство доступное только экземплярам, но не классу',\r\n          'Свойство доступное только классу, но не его экземплярам',\r\n          'Свойство которое нельзя изменять после создания',\r\n        ],\r\n        answer: 1,\r\n      },\r\n      {\r\n        question: 'Что такое обещание (promise)?',\r\n        choices: [\r\n          'Функция, представляющая конечный результат асинхронной операции',\r\n          'Данные полученные в результате асинхронной операции',\r\n          'Объект, представляющий конечный результат асинхронной операции',\r\n        ],\r\n        answer: 2,\r\n      },\r\n      {\r\n        question: 'Выберите не существующий HTTP-метод.',\r\n        choices: ['PUT', 'GET', 'GRAB', 'DELETE', 'PATCH'],\r\n        answer: 2,\r\n      },\r\n      {\r\n        question: 'Какой командой будет запускаться npm-скрипт с именем server?',\r\n        choices: [\r\n          'npm server',\r\n          'npm start server',\r\n          'npm execute server',\r\n          'npm run server',\r\n        ],\r\n        answer: 3,\r\n      },\r\n    ],\r\n  };\r\n  export default quizData;","import React, {Fragment} from 'react';\nimport quizData from \"./quizData\"\nimport './reset.css';\nimport './App.css';\nimport $ from \"jquery\";\nimport swal from 'sweetalert';\n\n\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n    this.result_check = this.result_check.bind(this)\n  }\n\nresult_check(){\n  let ordered_list = document.querySelector(\".ordered_list\").childNodes\n  var array = Array.from(ordered_list);\n  const values = array.map(data => $(data).find('input:checked').val())\n\n  const ifAllChecked = values.every(data => data !== undefined)\n  if(!ifAllChecked){\n    return swal({\n      text: \"Вы не ответили на все вопросы!\",\n      icon: \"info\",\n      button: \"Назад\",\n    });\n  }else {const right_answers = values.reduce((acc,currValue,idx) => {\n        if(currValue === quizData.questions[idx].choices[quizData.questions[idx].answer]){\n             acc = [...acc,true]\n        }\n        return acc\n        },[])\n       const final_result = right_answers.length * 100/values.length\n       if(final_result >= 50){\n         return swal({\n          title: \"Хорошая работа!\",\n          text: `Вы прошли тест! Вы дали ${final_result.toFixed(0)}% правильных ответов!`,\n          icon: \"success\",\n          button: \"ok!\",\n        });\n       }else return swal(\"Провал!\", `Ваш результат ${final_result.toFixed(0)}% правильных ответов!`, \"warning\");\n  }\n}\n\n\nrender(){\n  return (\n <section>\n  <h1>{quizData.title}</h1>\n  <ol className=\"ordered_list\">\n {quizData.questions.map((data,idx) =>(\n       <li key={idx}className = \"list_block\">\n          <h3 className=\"question\" htmlFor={data.question}>{idx + 1} {data.question}</h3>\n            {data.choices.map( choice => (<div className=\"question_wrapper\">\n                    <input name={data.question} type=\"radio\" value={choice} />\n  \n                    <span className = \"choice\">{choice}</span>\n\n                    </div>))\n            }\n       </li>))}\n  </ol>\n  <button className=\"check_results\" onClick = {this.result_check}>ПРОВЕРИТЬ</button>\n </section>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}